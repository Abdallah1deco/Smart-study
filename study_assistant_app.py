import streamlit as st
import tempfile
import os
import PyPDF2
import openai

# ุฅุนุฏุงุฏ ูุงุฌูุฉ ุงููุณุชุฎุฏู
st.set_page_config(page_title="ูุณุงุนุฏ ุงูุฏุฑุงุณุฉ ุงูุฐูู", layout='wide')
st.title("๐ ูุณุงุนุฏ ุงูุฏุฑุงุณุฉ ุงูุฐูู")

# ุฅุนุฏุงุฏ API KEY ูู OpenAI (ูุฑุฌู ุงุณุชุจุฏุงู 'YOUR_OPENAI_API_KEY' ุจููุชุงุญู)
OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"
openai.api_key = OPENAI_API_KEY

# ุฏุงูุฉ ูุชุญููู ูุต PDF
def extract_pdf_text(pdf_file):
    pdf_reader = PyPDF2.PdfReader(pdf_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text() or ""
    return text

# ุฏุงูุฉ ุงูุจุญุซ ูู ุงููุต
def search_in_text(full_text, query):
    query_lower = query.lower()
    found = []
    for idx, line in enumerate(full_text.split('\n')):
        if query_lower in line.lower():
            found.append((idx + 1, line))
    return found

# ุฏุงูุฉ ุชูููุฏ ุงุฎุชุจุงุฑ ูู ูุชุงุจ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
def generate_quiz_from_text(text, n_questions=5):
    prompt = (
        f"ุฃูุช ูุนูู ูุญุชุฑู. ุงููุชุงุจ ุงูุชุงูู ุนุจุงุฑุฉ ุนู ูุงุฏุฉ ุฏุฑุงุณูุฉุ "
        f"ุฃูุดุฆ ุงุฎุชุจุงุฑูุง ูููููุง ูู {n_questions} ุฃุณุฆูุฉ ูุชุนุฏุฏุฉ ุงูุฎูุงุฑุงุช ุจูุงุกู ุนูู ุงููุต ุงูุชุงููุ "
        f"ูุงูุชุจ ุงูุฎูุงุฑุงุช ูุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ุจุนุฏ ูู ุณุคุงู:\n\n{text[:1500]}\n\n"
        "ุงูุชุจ ุงูุฃุณุฆูุฉ ุจุงูุนุฑุจูุฉ."
    )
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", messages=[{"role": "system", "content": prompt}], max_tokens=800
    )
    return response["choices"][0]["message"]["content"].strip()

# ุชุญููู ููู PDF
uploaded_file = st.file_uploader("๐ ูู ุจุฅุฑูุงู ููู PDF ูููุชุงุจ ุฃู ุงููุงุฏุฉ", type=["pdf"])

if uploaded_file:
    # ุงุณุชุฎุฑุงุฌ ูุต ุงููุชุงุจ
    with st.spinner("ุฌุงุฑู ุงุณุชุฎุฑุงุฌ ุงููุต ูู ุงูููู..."):
        pdf_text = extract_pdf_text(uploaded_file)
    st.success("ุชู ุงุณุชุฎุฑุงุฌ ุงููุต ุจูุฌุงุญ!")

    # ุงูุจุญุซ ูู ุงููุชุงุจ
    st.subheader("๐ ุงูุจุญุซ ูู ุงููุชุงุจ")
    search_query = st.text_input("ุงูุชุจ ูููุฉ ุฃู ุฌููุฉ ููุจุญุซ ุนููุง ูู ุงููุชุงุจ")
    if search_query:
        results = search_in_text(pdf_text, search_query)
        if results:
            st.write(f"ุชู ุงูุนุซูุฑ ุนูู {len(results)} ูุชูุฌุฉ:")
            for idx, line in results:
                st.markdown(f"**ุตูุญุฉ/ุณุทุฑ {idx}:** {line}")
        else:
            st.info("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุงุฆุฌ.")

    # ุชุญููู ุงููุชุงุจ ูุชูููุฏ ุงุฎุชุจุงุฑ
    st.subheader("๐ค ุชุญููู ุงููุชุงุจ ูุชูููุฏ ุงุฎุชุจุงุฑ")
    num_questions = st.slider("ุนุฏุฏ ุงูุฃุณุฆูุฉ ูู ุงูุงุฎุชุจุงุฑ", 3, 10, 5)
    if st.button("ุชูููุฏ ุงุฎุชุจุงุฑ ูู ูุญุชูู ุงููุชุงุจ"):
        with st.spinner("ูุชู ุชุญููู ุงููุชุงุจ ูุชูููุฏ ุงูุงุฎุชุจุงุฑ..."):
            quiz = generate_quiz_from_text(pdf_text, n_questions=num_questions)
        st.markdown("### ุงูุงุฎุชุจุงุฑ ุงูููุชุฑุญ:")
        st.write(quiz)
else:
    st.info("ูุฑุฌู ุฑูุน ููู PDF ููุจุฏุก.")

st.markdown("---")
st.caption("ยฉ 2025 ูุณุงุนุฏ ุงูุฏุฑุงุณุฉ ุงูุฐูู - ุฌููุน ุงูุญููู ูุญููุธุฉ.")